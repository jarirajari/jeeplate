<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Jeeplate
 ! Copyright (C) 2014 Jari Kuusisto
 ! 
 ! This program is free software: you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License as published by
 ! the Free Software Foundation, either version 3 of the License, or
 ! (at your option) any later version.
 ! 
 ! This program is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ! GNU General Public License for more details.
 ! 
 ! You should have received a copy of the GNU General Public License
 ! along with this program. If not, see <http://www.gnu.org/licenses/>.
 ! 
 !-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"   
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://java.sun.com/jsf/core">
    <h:body>

        <ui:composition template="WEB-INF/template/template_jee.xhtml">
            <!-- Override template content -->
            <ui:define name="content">
                <p>Restricted.xhtml default content</p>
                <h:form id="first">
                    <p>
                        <p:outputLabel for="domains" value="Domains: " />
                        <h:selectOneMenu id="domains">
                            <f:selectItems value="#{userModel.allUsers().values()}" var="users" itemLabel="#{users.dataModel.username}" itemValue="#{users.dataModel.id}" />
                        </h:selectOneMenu>
                        <br />
                        <p:outputLabel for="domain" value="Add domain: " />
                        <p:inputText id="domain" value="#{restrictedView.IODomain}" />
                        <br />
                        <p:outputLabel for="users" value="Users: " />
                        <h:selectOneMenu id="users">
                            <f:selectItems value="#{userModel.allUsers().values()}" var="users" itemLabel="#{users.dataModel.username}" itemValue="#{users.dataModel.id}" />
                        </h:selectOneMenu>
                        <br />
                        <p:outputLabel for="user" value="Add user: " />
                            <p:inputText id="user" />
                        <br />
                        <p:outputLabel for="groups" value="Groups: " />
                        <h:selectOneMenu id="groups">
                            <f:selectItems value="#{userGroupModel.allGroups().values()}" var="groups" itemLabel="#{groups.dataModel.groupname}" itemValue="#{groups.dataModel.id}" noSelectionValue="none"/>
                        </h:selectOneMenu>
                        <br />
                        <p:outputLabel for="group" value="Add group: " />
                        <h:inputText id="group" />
                        <br />
                    </p>
                    
                    <p:commandButton value="+Domain" icon="fa fa-edit" process="@form" 
                                     action="#{restrictedView.createNewDomain()}">
                        
                    </p:commandButton>
                </h:form>
                <h:form id="add">
                    <p>
                        <p:outputLabel for="input2" value="Text: " />
                        <h:inputText id="input2" value="#{restrictedView.IOInput}"/>
                        <h:outputText value="#{restrictedView.selectedUser}" />
                        <p:outputLabel for="users2" value="Add user" />
                        <p:selectOneMenu id="users2" disabled="false" value="#{restrictedView.selectedUser}" immediate="true">
                            <f:selectItem itemLabel="User" itemValue="" noSelectionOption="true" />
                            <f:selectItems value="#{userModel.allUsers().values()}" var="users" itemLabel="#{users.dataModel.username}" itemValue="#{users.dataModel.id}"/>
                        </p:selectOneMenu>                   
                        <p:outputLabel for="groups2" value=" to group " />
                        <p:selectOneMenu id="groups2" disabled="false" value="#{restrictedView.selectedGroup}">
                            <f:selectItem itemLabel="Group" itemValue="" noSelectionOption="true" />
                            <f:selectItems value="#{userGroupModel.allGroups()}" var="groups" itemLabel="#{groups.dataModel.groupname}" itemValue="#{groups.dataModel.id}" noSelectionValue="none" />
                        </p:selectOneMenu>
                        <br />
                    </p>
                    <p:commandButton value="Lisää käyttäjä ryhmään" action="#{restrictedView.addToGroup()}">
                    </p:commandButton>
                </h:form>
                <h:form id="adminConfigure" >
                    <p:commandButton id="createAPP" value="Luo applikaatio" rendered="#{restrictedView.showConfigureApplication()}" process="adminConfigure">
                        <f:ajax listener="#{restrictedView.configureApplication()}" event="click" render=":adminConfigure"/>
                    </p:commandButton>
                </h:form>
                <p>
                    Domain concept is for either
                    a) different users with exactly same grouped permissions, or
                    b) domain allows aspects like different stakeholders to be grouped 
                    !! Domains can be added dynamically, but groups are manually coded
                    !! But when a domain is created a admin assign certain groups to it (not all)
                    
                    Double login allows separated user management.. and actual application authorization
                    <br />
                    Testing appBean: <h:outputText value="#{restrictedView.testAppBean()}"></h:outputText>
                    <br />
                </p>
            </ui:define>
            <ui:define name="footer" rendered="false" />
        </ui:composition>
    </h:body>
</html>
