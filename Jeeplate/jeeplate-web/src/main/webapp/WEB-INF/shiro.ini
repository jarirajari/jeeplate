# Apache Shiro Configuration: http://shiro.apache.org/configuration.html
#
# =============================== 
# Shiro INI configuration for WAR 
# =============================== 
#
# Default org.apache.shiro.realm.text.IniRealm realm instance is automatically 
# generated and make it will be available in the [main] section as "iniRealm" 
# unless there is overriding configuration defined in file (this file). Multiple 
# realms are allowed too and they are traversed with a strategy (note order!).
# The default SecurityManager implementation defaults to using a DefaultSessionManager

[main]
# SSL
ssl.enabled=false

# Multi-realm configuration (AtLeastOneSuccessfulStrategy)
#strategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#securityManager.realms = $saltedJdbcRealm, $iniRealm
#securityManager.authenticator.authenticationStrategy = $strategy

# Custom realm configuration
saltedJdbcRealm=org.sisto.jeeplate.security.shiro.JNDIAndSaltAwareJdbcRealm
# Any object property is automatically configurable in Shiro.ini file. Warning: check ds name!
saltedJdbcRealm.jndiDataSourceName=java:jboss/datasources/PostgreDS
# Realm handles also authorization
saltedJdbcRealm.permissionsLookupEnabled=false
# Retrieve both password (first result column) and salt (second result column)

saltedJdbcRealm.authenticationQuery = SELECT password, salt FROM system_users WHERE username = ?
saltedJdbcRealm.userRolesQuery      = SELECT role FROM user_roles WHERE id = (SELECT id FROM users WHERE username = ?)
#saltedJdbcRealm.permissionsQuery    = SELECT permission FROM role_permissions WHERE role_name = ?

# Filter configuration, redirect after successful login with "customFilter.successUrl"
customFilter = org.sisto.jeeplate.security.shiro.FacesAjaxAwareUserFilter
customFilter.loginUrl = /index.xhtml
customFilter.name=FacesAjaxAwareUserFilter

# Password hash matching 
sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
sha256Matcher.hashAlgorithmName=SHA-256
sha256Matcher.hashIterations=101
saltedJdbcRealm.credentialsMatcher = $sha256Matcher

# username = password, roleName1, roleName2, roleNameN
#[users]
#
# rolename = permission1, permission2, permissionN
#[roles]
#

# First filter URL match wins!
# Force SSL for login page with "/index.xhtml=ssl[8443], authc"
[urls]
/index.xhtml = anon
/javax.faces.resource/** = anon
/restricted.xhtml = customFilter
/auth/** = customFilter
